% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lens.R
\name{mkLens}
\alias{mkLens}
\title{Construct a lens}
\usage{
mkLens(view, over)
}
\arguments{
\item{view}{A function that takes data and returns a subpart
of that structure}

\item{over}{A function that takes data and a value and replaces
the given subpart of the data with that value.}
}
\description{
A lens consists of a \code{view} function and
an \code{over} function, a getter and setter respectively.
Lenses can be composed to access or modify deeply nested
structures.
}
\details{
lenses are popular in functional programming because
they allow you to compositionally build functional getters and
setters. Lens need to follow the following rules (laws)
\enumerate{
\item Get-Put: If you get (view) some data with a lens, and then
modify (over) the data with that value, you get the input data back.
\item Put-Get: If you put (over) a value into some data with a lens,
then get that value with the lens, you get back what you put in.
\item Put-Put: If you put a value into some data with a lens, and
then put another value with the same lens, it's the same as only
doing the second put.
}
}
\examples{
  view(1:10, index(4)) # returns 4
  over(1:10, index(1), 10) # returns c(10, 2:10)
}
